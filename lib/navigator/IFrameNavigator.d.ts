import Navigator from "./Navigator";
import Annotator from "../store/Annotator";
import { Publication } from "../model/Publication";
import EventHandler from "../utils/EventHandler";
import { Locator, ReadingPosition } from "../model/Locator";
import { UserSettings, UserSettingsUIConfig } from "../model/user-settings/UserSettings";
import BookmarkModule, { BookmarkModuleConfig } from "../modules/BookmarkModule";
import AnnotationModule, { AnnotationModuleConfig } from "../modules/AnnotationModule";
import TTSModule, { TTSModuleConfig } from "../modules/TTS/TTSModule";
import SearchModule, { SearchModuleConfig } from "../modules/search/SearchModule";
import ContentProtectionModule, { ContentProtectionModuleConfig } from "../modules/protection/ContentProtectionModule";
import TextHighlighter, { TextHighlighterConfig } from "../modules/highlight/TextHighlighter";
import TimelineModule from "../modules/positions/TimelineModule";
import TouchEventHandler from "../utils/TouchEventHandler";
import KeyboardEventHandler from "../utils/KeyboardEventHandler";
import BookView from "../views/BookView";
import MediaOverlayModule, { MediaOverlayModuleConfig } from "../modules/mediaoverlays/MediaOverlayModule";
import { D2Link, Link } from "../model/Link";
export declare type GetContent = (href: string) => Promise<string>;
export declare type GetContentBytesLength = (href: string) => Promise<number>;
export interface NavigatorAPI {
    updateSettings: any;
    getContent: GetContent;
    getContentBytesLength: GetContentBytesLength;
    resourceReady: any;
    resourceAtStart: any;
    resourceAtEnd: any;
    resourceFitsScreen: any;
    updateCurrentLocation: any;
}
export interface UpLinkConfig {
    url?: URL;
    label?: string;
    ariaLabel?: string;
}
export interface IFrameAttributes {
    margin: number;
    navHeight?: number;
    iframePaddingTop?: number;
    bottomInfoHeight?: number;
}
export interface IFrameNavigatorConfig {
    mainElement: HTMLElement;
    headerMenu: HTMLElement;
    footerMenu: HTMLElement;
    publication: Publication;
    settings: UserSettings;
    annotator?: Annotator;
    eventHandler?: EventHandler;
    touchEventHandler?: TouchEventHandler;
    keyboardEventHandler?: KeyboardEventHandler;
    upLink?: UpLinkConfig;
    initialLastReadingPosition?: ReadingPosition;
    rights?: ReaderRights;
    material?: ReaderUI;
    api: NavigatorAPI;
    tts: TTSModuleConfig;
    injectables: Array<Injectable>;
    attributes: IFrameAttributes;
    services: PublicationServices;
}
export interface PublicationServices {
    positions?: URL;
    weight?: URL;
}
export interface Injectable {
    type: string;
    url?: string;
    r2after?: boolean;
    r2before?: boolean;
    r2default?: boolean;
    fontFamily?: string;
    systemFont?: boolean;
    appearance?: string;
    async?: boolean;
}
export interface SelectionMenuItem {
    id: string;
    callback: any;
}
export interface ReaderRights {
    enableBookmarks?: boolean;
    enableAnnotations?: boolean;
    enableTTS?: boolean;
    enableSearch?: boolean;
    enableContentProtection?: boolean;
    enableMaterial?: boolean;
    enableTimeline?: boolean;
    autoGeneratePositions?: boolean;
    enableMediaOverlays?: boolean;
}
export interface ReaderUI {
    settings: UserSettingsUIConfig;
}
export interface ReaderConfig {
    url: URL;
    userSettings?: any;
    initialAnnotations?: any;
    lastReadingPosition?: any;
    upLinkUrl?: any;
    rights?: ReaderRights;
    material?: ReaderUI;
    api?: NavigatorAPI;
    tts?: TTSModuleConfig;
    search?: SearchModuleConfig;
    protection?: ContentProtectionModuleConfig;
    mediaOverlays?: MediaOverlayModuleConfig;
    annotations?: AnnotationModuleConfig;
    bookmarks?: BookmarkModuleConfig;
    highlighter?: TextHighlighterConfig;
    injectables: Array<Injectable>;
    injectablesFixed: Array<Injectable>;
    useLocalStorage?: boolean;
    attributes?: IFrameAttributes;
    services?: PublicationServices;
}
/** Class that shows webpub resources in an iframe, with navigation controls outside the iframe. */
export default class IFrameNavigator implements Navigator {
    iframes: Array<HTMLIFrameElement>;
    currentTocUrl: string;
    headerMenu: HTMLElement;
    mainElement: HTMLElement;
    publication: Publication;
    bookmarkModule?: BookmarkModule;
    annotationModule?: AnnotationModule;
    ttsModule?: TTSModule;
    searchModule?: SearchModule;
    contentProtectionModule?: ContentProtectionModule;
    highlighter?: TextHighlighter;
    timelineModule?: TimelineModule;
    mediaOverlayModule?: MediaOverlayModule;
    sideNavExpanded: boolean;
    material: boolean;
    mTabs: Array<any>;
    mDropdowns: Array<any>;
    mCollapsibles: Array<any>;
    mSidenav: any;
    currentChapterLink: D2Link;
    currentSpreadLinks: {
        left?: D2Link;
        right?: D2Link;
    };
    currentTOCRawLink: string;
    private nextChapterLink;
    private previousChapterLink;
    settings: UserSettings;
    private readonly annotator;
    view: BookView | null;
    private readonly eventHandler;
    private readonly touchEventHandler;
    private readonly keyboardEventHandler;
    private readonly upLinkConfig;
    private upLink;
    private nextChapterBottomAnchorElement;
    private previousChapterTopAnchorElement;
    private nextChapterAnchorElement;
    private previousChapterAnchorElement;
    private nextPageAnchorElement;
    private previousPageAnchorElement;
    private espandMenuIcon;
    private landmarksView;
    private landmarksSection;
    private pageListView;
    private goToPageView;
    private goToPageNumberInput;
    private goToPageNumberButton;
    private bookmarksControl;
    private bookmarksView;
    private links;
    private linksTopLeft;
    private linksBottom;
    private linksMiddle;
    private tocView;
    private loadingMessage;
    private errorMessage;
    private tryAgainButton;
    private goBackButton;
    private infoTop;
    private infoBottom;
    private bookTitle;
    private chapterTitle;
    private chapterPosition;
    private remainingPositions;
    private newPosition;
    private newElementId;
    private isBeingStyled;
    private isLoading;
    private readonly initialLastReadingPosition;
    api: NavigatorAPI;
    rights: ReaderRights;
    tts: TTSModuleConfig;
    injectables: Array<Injectable>;
    attributes: IFrameAttributes;
    services: PublicationServices;
    static create(config: IFrameNavigatorConfig): Promise<any>;
    protected constructor(settings: UserSettings, annotator: Annotator | null, eventHandler: EventHandler | null, touchEventHandler: TouchEventHandler | null, keyboardEventHandler: KeyboardEventHandler | null, upLinkConfig: UpLinkConfig | null, initialLastReadingPosition: ReadingPosition | null, publication: Publication, material: any, api: NavigatorAPI, rights: ReaderRights, tts: TTSModuleConfig, injectables: Array<Injectable>, attributes: IFrameAttributes, services: PublicationServices);
    stop(): Promise<void>;
    spreads: HTMLDivElement;
    firstSpread: HTMLDivElement;
    protected start(mainElement: HTMLElement, headerMenu: HTMLElement, footerMenu: HTMLElement): Promise<void>;
    timeout: any;
    onResize: () => void;
    reload: () => Promise<void>;
    private setupEvents;
    private setupModalFocusTrap;
    private goToPageNumber;
    isScrolling: boolean;
    private updateBookView;
    private loadManifest;
    private handleIFrameLoad;
    private injectInjectablesIntoIframeHead;
    private abortOnError;
    private tryAgain;
    private precessContentForIframe;
    private static goBack;
    private static isDisplayed;
    private static showElement;
    private static hideElement;
    private hideModal;
    private toggleDisplay;
    private handleEditClick;
    get hasMediaOverlays(): boolean;
    startReadAloud(): void;
    stopReadAloud(ttsOnly?: boolean): void;
    pauseReadAloud(): void;
    resumeReadAloud(): void;
    totalResources(): number;
    mostRecentNavigatedTocItem(): string;
    currentResource(): number;
    currentLink(): Array<Link>;
    tableOfContents(): any;
    readingOrder(): any;
    atStart(): boolean;
    atEnd(): boolean;
    previousPage(): any;
    nextPage(): any;
    previousResource(): any;
    nextResource(): any;
    goTo(locator: Locator): any;
    currentLocator(): Locator;
    positions(): any;
    goToPosition(position: number): void;
    snapToElement(element: HTMLElement): void;
    applyAttributes(attributes: IFrameAttributes): void;
    private handlePreviousPageClick;
    private handleNextPageClick;
    private handleClickThrough;
    private handleInternalLink;
    private handleNumberOfIframes;
    private handleResize;
    updatePositionInfo(): void;
    private handlePreviousChapterClick;
    private handleNextChapterClick;
    private hideBookmarksOnEscape;
    private hideView;
    private setActiveTOCItem;
    navigate(locator: Locator): void;
    checkResourcePosition: (() => void) & {
        clear(): void;
    };
    private showIframeContents;
    private showLoadingMessageAfterDelay;
    private hideIframeContents;
    private hideLoadingMessage;
    private saveCurrentReadingPosition;
    private static createBase;
    private static createCssLink;
    private static createJavascriptLink;
}
